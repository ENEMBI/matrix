# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Playwright Automation

on:
    workflow_dispatch:
jobs:
    load-testing:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                users:
                    [
                        { "email": "email1", "password": "password1" },
                        { "email": "email2", "password": "password2" },
                        { "email": "email3", "password": "password3" },
                        { "email": "email4", "password": "password4" },
                    ]
        steps:
            - uses: actions/checkout@v3
            - name: Install JQ Tool
              uses: mbround18/install-jq@v1
            - run: echo "${{ matrix.users }} and $USER_EMAIL and $USER_PWD"
              env:
                  USER_EMAIL: ${{ matrix.users.email }}
                  USER_PWD: ${{ matrix.users.password }}

            - run: |
                  result=$(echo "${{matrix.users}}" | jq -c --arg workers "3" 'reduce range(0; length; . + $workers) as $i ([]; . + [.[ $i: $i + $workers ]])')
                  echo "$result"
            # - id: set_var
            #   run: |
            #       content=`cat ./users.json`
            #       # the following lines are only required for multi line json
            #       content="${content//'%'/'%25'}"
            #       content="${content//$'\n'/'%0A'}"
            #       content="${content//$'\r'/'%0D'}"
            #       # end of optional handling for multi line json
            #       echo "::set-output name=users::$content"
            # - run: |
            #       echo "${{fromJson(steps.set_var.outputs.users)}}"
            #       echo "${{fromJson(steps.set_var.outputs.users[0])}}"
            #       echo "${{fromJson(steps.set_var.outputs.users[0].email)}}"
            #       echo "${{fromJson(steps.set_var.outputs.users[0].password)}}"
            # - run: |
            #     echo 'PACKAGE_JSON<<EOF' >> $GITHUB_ENV
            #     cat ./package.json >> $GITHUB_ENV
            #     echo 'EOF' >> $GITHUB_ENV
            # - run: |
            #     echo '${{ fromJson(env.PACKAGE_JSON).version }}'
            # - name: get version
            #   id: users
            #   uses: notiz-dev/github-action-json-property@release
            #   with:
            #     path: 'users.json'
            #     prop_path: 'users'
            # - run: echo ${{steps.users.outputs.prop}}
            # - name: Build
            #   run: bash scripts/build.sh
